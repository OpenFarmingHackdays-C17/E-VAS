@page "/herde"
@inject IMatToaster Toaster
@inject DataContext DataContext
@inject CategoryMapper CategoryMapper

<h3>Deine Herde:</h3>

<MatFileUpload OnChange="@FilesReady" Label="Hier klicken, oder eine Datei hierhin ziehen."></MatFileUpload>

<MatTable Items="@gves">
    <MatTableHeader>
        <th>Ohrenmarkennummer</th>
        <th>Name</th>
        <th>Kategorie</th>
    </MatTableHeader>
    <MatTableRow>
        <td>@context.Tvd.Ohrmarkennummer</td>
        @if (string.IsNullOrEmpty(context.Tvd.Name))
        {
            <td>Unbenannt</td>
        }
        else
        {
            <td>@context.Tvd.Name</td>
        }
        <td>@context.CategoryId</td>
    </MatTableRow>
</MatTable>

@code {
    private List<GveModel> gves = new List<GveModel>();
    private bool buttonDisabled = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            gves = await DataContext.GveModel.Include(x => x.Tvd).ToListAsync();
            this.StateHasChanged();
        }
    }

    async Task FilesReady(IMatFileUploadEntry[] files)
    {
        //delete all currently existing data.
        DataContext.GveModel.RemoveRange(DataContext.GveModel.Include(x => x.Tvd).ToList());
        this.gves.Clear();
        this.StateHasChanged();

        if (files.Length != 1)
            return;

        List<TvdModel> records = new List<TvdModel>();

        using (var stream = new MemoryStream())
        {
            await files[0].WriteToStreamAsync(stream);

            stream.Seek(0, SeekOrigin.Begin);

            string content;
            using (var tempReader = new StreamReader(stream))
            {
                content = tempReader.ReadToEnd();
            }
            content = content.Replace("Ohrmarkennummer:", "Ohrmarkennummer");

            using (var reader = new StringReader(content))
            {
                var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
                csv.Configuration.HasHeaderRecord = true;
                csv.Configuration.Delimiter = ";";
                csv.Configuration.MissingFieldFound = null;
                csv.Configuration.Encoding = System.Text.Encoding.UTF8;
                csv.Configuration.HeaderValidated = null;

                records = csv.GetRecords<TvdModel>().ToList();
                if (records == null)
                {
                    Toaster.Add("Fehler beim Import", MatToastType.Danger);
                    return;
                }

                foreach (var item in records)
                {
                    gves.Add(new GveModel()
                    {
                        GveId = Guid.NewGuid().ToString(),
                        Name = item.Name,
                        Tvd = item,
                        CategoryId = CategoryMapper.GetCategory(item)
                    });
                }
            }

            try
            {
                //Clear everything
                await DataContext.Database.ExecuteSqlRawAsync("DELETE FROM gvemodel");
                await DataContext.Database.ExecuteSqlRawAsync("DELETE FROM tvdmodel");
                //add the data
                await DataContext.GveModel.AddRangeAsync(gves);
                await DataContext.SaveChangesAsync();
            }
            catch
            {
                //Toaster.Add("Fehler bei der Speicherung", MatToastType.Danger);
            }
            Toaster.Add("Daten importiert.", MatToastType.Success);
        }
    }
}